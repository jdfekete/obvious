#summary The notification model introduced in Obvious.

= Introduction =

Obvious as many popular InfoVis toolkits such as Prefuse, Infovis Toolkit and JUNG. With this patterns, data structures are *Observable* meaning that some *Observers* can be registered in order to be notified when structures are changed.

However, during the design and conception of Obvious bindings, we saw that each toolkit implements this model in its own way with its own syntax and idioms. That is why Obvious uses a notification made to handle a wide variety of notification models even those that are not currently implemented in toolkits. For example, we design a model based on the Obvious-JDBC binding supporting commit and batch mechanisms.

= A standard syntax for the notification model =

All implementations of the Table interface in Obvious have methods to register, unregister, and get listeners:

{{{
table.addTableListener(listener);
table.removeTableListener(listener);
}}}

Thus, when a method that changes the structure is called (addRow, removeRow, set), the _fireTableEvent_ (or _fireNetworkEvent_) method is called. Then, this method awakes all registered listeners and furnishes them information about changes:

{{{
// start : starting row for change, end : ending row, col : columns
// affected by the changes, type : type of the operation (add, rem...)
fireTableEvent(start, end, col, type);
}}}

In the listener, the method tableChanged is called, with the arguments provided by the _fireTableEvent_ method.

= Obvious JDBC binding: introducing new mechanisms for notification model =