#summary Data model for obvious.

= Introduction =

The toolkit contains interface to describe tables, graphs, trees, tuples, nodes, and edges. Generally (and mandatory...), in obvious, a schema is used to create and describe these structures.

This section presents each interface and gives the class diagram of the obvious data model.

= Interfaces =

== Schema ==

The Schema interface describes the structure of obvious tuples (i.e. table rows, nodes and edges). It contains columns description and methods to add/remove columns. As there is no column class in obvious (unlike other toolkits as ivtk), using this interface is the only way in obvious to get information about a column from an existing tuple.

To add a new column to a schema, you simply needs its name (java String), its type (java Class<?>) and its default value. In the following example, the developer adds a "name" column and an "age" column to an existing schema :

{{{
schema.addColumn("name", String.class, "John Doe");
schema.addColumn("age", Integer.class, new Integer(25));
}}}

To retrieve information about a specific column from a schema, you can use the column index or the column name.

== Tuple, nodes and edges ==

=== Tuple ===

Each data structure in obvious is composed of tuples. For tables, a tuple corresponds to a table row, and in graph and trees a tuple corresponds to a node or an edge.

A tuple is composed of several columns. They are described by a Schema instance. Thus, each cell of a tuple can be accessed or set by calling get / set method with column's name or index as parameter.

{{{
// We assume the tuple used the schema introduced in the Schema section.
String tupleNameValue = (String) tuple.get(0);
tupleNameValue.equals(tuple.get("name")); // returns true
}}}

In this example, the developer used the tuple's get method -returning an object- and then casts the result to String. With obvious tuple, you can directly get the result as a String (or another java's primary type) by using the getString method. In addition, it is possible to check the type of the get method. This is shown by the following example :

{{{
String tupleNameValue = "";
// Type checking
if (tuple.canGetString(0)) {
   tupleNameValue = tuple.getString(0);
} else {
   throw new ObviousRuntimeException("Failed...");
}
}}}

=== Node ===

Node interface is strictly identical to Tuple interface. This interface is a tag used to distinguish node tuples from edge tuples in obvious graph.

=== Edge ===

Edge interface is strictly identical to Tuple interface. This interface is a tag used to distinguish edge tuples from node tuples in obvious graph.

== Data (Tag) == 

== Table ==

== Graph, Network, Tree ==

=== Graph ===

=== Network ===

=== Tree ===

= Data model : class diagram =
Soon...