#summary This page describes the obviousx package.
#sidebar UserGuide

= Introduction =

Obviousx is a complementary package, named in the same way as the javax package of Sun. It introduces support functions for all obvious bindings. Each subpackage of Obvious will be described below.


= obviousx =

The obviousx root package only contains two exception classes:

 * _ObviousxException_ : class used for exceptions directly created by obviousx mechanism.
 * _ObviousxRuntimeException_ : class extending RuntimeException, it is mainly used to encapsulate exception generated by dependancies of obviousx.


== obviousx.io ==

This package contains several interfaces defining reader for Network and Table Obvious objects and corresponding writers. Three interfaces are defined:

 * _Exporter_ : this interface is meant to be used when creating a writer. By calling the createFile() method an output file corresponding to the written Obvious data structure must be created. This interface assumes the use of Java Format and the Obvious introduced interface FormatFactory (presented below) to handle Java objects conversion to String.
 * _GraphImporter_ : this interface is meant to be used when reading a file describing a graph that the user wants to import as an Obvious Network. By calling the loadGraph() method an output Obvious Network corresponding to the read file must be created. This interface assumes the use of Java Format and the Obvious introduced interface FormatFactory (presented below) to handle String conversion to Java objects.
 * _TableImporter_ : this interface is meant to be used when reading a file describing tabular data that the user wants to import as an Obvious Table. By calling the loadTable() method an output Obvious Table corresponding to the read file must be created. This interface assumes the use of Java Format and the Obvious introduced interface FormatFactory (presented below) to handle String conversion to Java objects.

=== obviousx.io.impl ===

This subpackage contains generic Obvious readers and writers directly written in Java: none of its classes are based on an existing InfoVis toolkit. The following classes are defined in this package:

 * _CSVGraphImport_ and _CSVTableImport_ : class used to import to Obvious file describing graph and tabular data.
 * _CSVGraphExport_ and _CSVTableExport_ : class used to export Obvious data structure to CSV files
 * _GraphMLExport_ : class exporting an Obvious network to a GraphML file
 * _GraphMLImport_ : class importing a GraphML file to an Obvious network
 * _ObviousTableModel_ : class used to export an ObviousTable to a Java JTable
 

=== obviousx.io.ivtk ===

This packages contains readers and writers for Obvious that wrap readers and writers introduced in the InfoVis Toolkit.

=== obviousx.io.prefuse ===

This packages contains readers and writers for Obvious that wrap readers and writers introduced in the Prefuse Toolkit.

== obviousx.text ==

This package only introduced the interface TypedFormat. This interface is identical to standard Java Format interface but adds to it one function getFormatedClass() that returns the associated Java class to this format. It is a convenient interface used in FormatFactory (see above).

== obviousx.util ==

This package contains the FormatFactory interface. It defines ways to retrieves a TypedFormat by giving the classpath (via a String) of its associated class.

This is used in all Obvious reader / writer to handle parsing and formating of Java objects.