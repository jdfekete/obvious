#summary Visualization partin obvious toolkit.

= Introduction =

This parts describes the Visualization abstract class and its associated classes in obvious toolkit. 


= Visualization (abstract class) =

== How to create an Obvious visualization? ==

Unlike the data model, Visualization is not an interface, but is implemented as an abstract class. To build a new obvious visualization instance, it is needed to provide an obvious data structure instance (among Table, Network and Tree<Node, Edge>), a [Predicate predicate] (can be null), a visualization technic name (can be null) and a map of parameters (can be null).


=== Optional parameters ===

Optional parameters for obvious visualizations are contained in a Java map. Known parameters are identified by a key. This key is a java String (list of known keys is available below). If a visualization is provided with an unknown parameter, it will be simply ignored.

The following table presents all existing parameters for visualization :

|| *Parameter key* || *Value Type* || *Implementation* || *Description* ||
|| X_AXIS || String || obvious-ivtk / obvious-prefuse (scatterplot) || Column used for x values ||
|| Y_AXIS || String || obvious-ivtk(scatterplot) /obvious-prefuse || Column used for Y values ||
|| LAYOUT || String || obvious-jung ||Classpath for JUNG layout used for the current visualization ||
|| GROUP_NAME || String || obvious-prefuse || Group Name used for the underlying prefuse visualization ||
|| DIRECTED || Boolean || obvious-prefuse || Indicates if the obvious graph is directed ||
|| NODE_KEY || String || obvious-prefuse || Column used for nodes ID ||
|| LABEL_KEY || String || obvious-prefuse || Column used for nodes label || 

== Specialized visualizations ==

For each implementation, specialized visualization classes exist for common visualization technics (scatterplot) or graph layouts.

== Monolithic vs Polylithic visualization (toolkit) ==

Infovis toolkits often uses [http://www.infovis-wiki.net/index.php?title=Polylithic_design polylithic] or [http://www.infovis-wiki.net/index.php?title=Monolithic_design monolithic] design, specialy to implement the visualization part. Obvious, as an abstract layer, can not be fully polylithic but tries, for visualizations, to support both monolithic and polylithic designs.

If the developper works with a monolithic toolkit (like ivtk), he should use those specialized classes or write a new subclass of Visualization or one of its subclasses.

Else if the developper works with a polylithic toolkit (like prefuse), he could use existing specialized classes or create new ones. But he could also build his visualization "from scratch" using _putAction_ and _setRenderer_ methods. Obvious Renderer and Action are just tag interfaces : existing implementation are totally dependant from their obvious implementation.

= VisualizationFactory (abstract class) =

VisualizationFactory is also an abstract class. It provides a list of all visualization technics available for an implementation.

To create a visualization, it is needed to provide an obvious data structure, a [Predicate predicate] (can be null) and a visualization technic name and a map of parameters.

{{{
    Visualization vis = visFactory.createVisualization(table, pred, "scatterplot", param);
}}}